import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.text.DecimalFormat;
import java.util.ArrayList;

public class ItemTest {
	
	private static final Boolean True = null;

	//---Equipping a high level weapon (lvl 2) for warrior (lvl 1)
	
	@Test
	public void equipWeapon_LvlToHigh_InvalidWeaponExceptionWithProperMessage() {
		//---arrange
		RPGCharacters app = new RPGCharacters();
		app.player = new Hero("Michel", "Warrior", 5, 2, 1);
		app.MakeWeapons();
		ArrayList<Weapon> weaponslist = app.weaponslist;
		String choice = "Bronze axe";
		String expected = "You dont have sufficient level to equip weapon!";
		//---act
		Exception exception = assertThrows(InvalidWeaponException.class, ()-> app.equipWeapon(choice));
		String actual = exception.getMessage();
		//---assert
		assertEquals(expected,actual);
	}
	
	//---Equipping a high level (lvl 2) armor for warrior (lvl 1)
	@Test
	public void equipArmor_LvlToHigh_InvalidArmorExceptionWithProperMessage() {
		//---arrange
		RPGCharacters app = new RPGCharacters();
		app.player = new Hero("Michel", "Warrior", 5, 2, 1);
		app.MakeArmor();
		ArrayList<Armor> armorlist = app.armorlist;
		String choice = "Steel plate";
		String slot = "Body";
		String expected = "You dont have sufficient level to equip armor!";
		//---act
		Exception exception = assertThrows(InvalidArmorException.class, ()-> app.equipArmor(choice, slot));
		String actual = exception.getMessage();
		//---assert
		assertEquals(expected,actual);
	}
	
	//---Equipping wrong weapon type, Warrior trying to equip bow
	@Test
	public void equipWeapon_WrongType_InvalidWeaponExceptionWithProperMessage() {
		//---arrange
		RPGCharacters app = new RPGCharacters();
		app.player = new Hero("Michel", "Warrior", 5, 2, 1);
		app.MakeWeapons();
		ArrayList<Weapon> weaponslist = app.weaponslist;
		String choice = "Wooden bow";
		String expected = "This weapon is not available to your class!";
		//---act
		Exception exception = assertThrows(InvalidWeaponException.class, ()-> app.equipWeapon(choice));
		String actual = exception.getMessage();
		//---assert
		assertEquals(expected,actual);
	}
	
	//---Equipping wrong armor type, Warrior trying to equip cloth armor
		@Test
		public void equipArmor_WrongType_InvalidArmorExceptionWithProperMessage() {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			app.MakeArmor();
			ArrayList<Armor> armorlist = app.armorlist;
			String choice = "Cloth";
			String slot = "Body";
			String expected = "This armor is not available to your class!";
			//---act
			Exception exception = assertThrows(InvalidArmorException.class, ()-> app.equipArmor(choice, slot));
			String actual = exception.getMessage();
			//---assert
			assertEquals(expected,actual);
		}
		
		//---Equipping a correct weapon
		@Test
		public void equipWeapon_rightType_BooleanTrueReturned() throws InvalidWeaponException {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			app.MakeWeapons();
			ArrayList<Weapon> weaponslist = app.weaponslist;
			String choice = "Wooden sword";
			Boolean expected = true;
			//---act
			Boolean actual = app.equipWeapon(choice);
			//---assert
			assertEquals(expected,actual);
		}
		
		//---Equipping right armor type
		@Test
		public void equipArmor_rightType_BooleanTrueReturned() throws InvalidArmorException {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			app.MakeArmor();
			ArrayList<Armor> armorlist = app.armorlist;
			String choice = "Bronze plate";
			String slot = "Body";
			boolean expected = true;
			//---act
			boolean actual = app.equipArmor(choice, slot);
			//---assert
			assertEquals(expected,actual);
		}
		
		//---calculate DPS when no weapon is equipped
		@Test
		public void damagePerSecond_NoWeapons_damagePerSecondNoWeaponsReturned() {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			int expected = 1*(1 + (5 / 100));
			//---act
			app.damagePerSecondNoWeapon();
			int actual = (int) app.player.getDPS();
			//---assert
			assertEquals(expected,actual);
		}
		
		//---calculate DSP with valid weapon equipped
		@Test
		public void damagePerSecond_withWeapon_damagePerSecondWithWeaponReturned() throws InvalidWeaponException {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.MakeWeapons();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			String choice = "Wooden sword";
			int expected = (int) ((2.5*1.5)*(1 + (5 / 100)));
			//---act
			app.equipWeapon(choice);
			app.updateStatsWithWeapon();
			int actual = (int) app.player.getDPS();
			//---assert
			assertEquals(expected,actual);
		}
		
		//---calculate DSP with valid weapon and armor equipped
		@Test
		public void damagePerSecond_withWeaponAndArmo_damagePerSecondWithWeaponAndArmorReturned() throws InvalidWeaponException, InvalidArmorException {
			//---arrange
			RPGCharacters app = new RPGCharacters();
			app.MakeWeapons();
			app.MakeArmor();
			app.player = new Hero("Michel", "Warrior", 5, 2, 1);
			String choiceWeapon = "Wooden sword"; //---damage:2.5, attacks_per_second:1.5
			String choiceArmor = "Bronze plate"; //---3 strength added 
			double expected = (double) (2.5*1.5)*(1+((5+3)/100));
			//---act
			app.equipArmor(choiceArmor, "Body");
			app.updateStatsWithArmor();
			app.equipWeapon(choiceWeapon);
			app.updateStatsWithWeapon();
			double actual = (double) app.player.getDPS();
			//---assert
			assertEquals(expected,actual);
		}
		
}
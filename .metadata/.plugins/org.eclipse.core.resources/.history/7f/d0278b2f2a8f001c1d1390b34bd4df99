import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class HeroTest {

	//---A character is level 1 when created
	@Test
	public void newHero_initialLvl_lvlOne() {
		//---arrange
		Hero player = new Hero("Michel", "Warrior", 5, 2, 1);
		int expected = 1;
		//---act
		int actual = player.getLevel();
		//---assert
		assertEquals(expected,actual);
	}
	
	//---when a character gains level it should be lvl 2
	@Test
	public void levelUp_nextLvl_lvlTwo() {
		//---arrange
		RPGCharacters app = new RPGCharacters();
		Hero player = new Hero("Michel", "Warrior", 5, 2, 1);
		int expected = 2;
		//---act
		app.levelUp();
		int actual = player.getLevel(); 
		//---assert
		assertEquals(expected,actual);
	}
	
	//---heros created with proper default values
	//---for Warrior
	@Test
	public void newWarrior_startAtt_warriorAtt() {
		//---arrange
		Hero player = new Hero("Michel", "Warrior", 5, 2, 1);
		double expected_str = 5;
		double expected_dex = 2;
		double expected_int = 1;
		//---act
		double actual_str = player.getBase_Strength();
		double actual_dex = player.getBase_Dexterity();
		double actual_int = player.getBase_Intelligence();
		//---assert
		assertEquals(expected_str,actual_str);
		assertEquals(expected_dex,actual_dex);
		assertEquals(expected_int,actual_int);
	}
	
	//---for Rogue
	@Test
	public void newRogue_startAtt_rogueAtt() {
		//---arrange
		Hero player = new Hero("Michel", "Rogue", 2, 6, 1);
		double expected_str = 2;
		double expected_dex = 6;
		double expected_int = 1;
		//---act
		double actual_str = player.getBase_Strength();
		double actual_dex = player.getBase_Dexterity();
		double actual_int = player.getBase_Intelligence();
		//---assert
		assertEquals(expected_str,actual_str);
		assertEquals(expected_dex,actual_dex);
		assertEquals(expected_int,actual_int);
	}
	
	//---for Ranger
	@Test
	public void newRanger_startAtt_rangerAtt() {
		//---arrange
		Hero player = new Hero("Michel", "Ranger", 1, 7, 1);
		double expected_str = 1;
		double expected_dex = 7;
		double expected_int = 1;
		//---act
		double actual_str = player.getBase_Strength();
		double actual_dex = player.getBase_Dexterity();
		double actual_int = player.getBase_Intelligence();
		//---assert
		assertEquals(expected_str,actual_str);
		assertEquals(expected_dex,actual_dex);
		assertEquals(expected_int,actual_int);
	}
	
	//---for Mage
	@Test
	public void newMage_startAtt_mageAtt() {
		//---arrange
		Hero player = new Hero("Michel", "Mage", 1, 1, 8);
		double expected_str = 1;
		double expected_dex = 1;
		double expected_int = 8;
		//---act
		double actual_str = player.getBase_Strength();
		double actual_dex = player.getBase_Dexterity();
		double actual_int = player.getBase_Intelligence();
		//---assert
		assertEquals(expected_str,actual_str);
		assertEquals(expected_dex,actual_dex);
		assertEquals(expected_int,actual_int);
		}
	
		//---heros attributes when level up 
		//---for Warrior
		@Test
		public void lvlUpWarrior_LvlUpAtt_warriorLvlTwoAtt() {
			//---arrange
			Hero player = new Hero("Michel", "Warrior", 5, 2, 1);
			double expected_str = 8;
			double expected_dex = 4;
			double expected_int = 2;
			float new_strength = player.getBase_Strength() + 3;
			float new_Dexterity = player.getBase_Dexterity() + 2;
			float new_Intelligence = player.getBase_Intelligence() + 1;
			player.setBaseAtt(new_strength, new_Dexterity, new_Intelligence);
			//---act
			double actual_str = player.getBase_Strength();
			double actual_dex = player.getBase_Dexterity();
			double actual_int = player.getBase_Intelligence();
			//---assert
			assertEquals(expected_str,actual_str);
			assertEquals(expected_dex,actual_dex);
			assertEquals(expected_int,actual_int);
		}
		
		//---for Rogue
		@Test
		public void lvlUpRogue_LvlUpAtt_rogueLvlTwoAtt() {
			//---arrange
			Hero player = new Hero("Michel", "Rogue", 2, 6, 1);
			double expected_str = 3;
			double expected_dex = 10;
			double expected_int = 2;
			float new_strength = player.getBase_Strength() + 1;
			float new_Dexterity = player.getBase_Dexterity() + 4;
			float new_Intelligence = player.getBase_Intelligence() + 1;
			player.setBaseAtt(new_strength, new_Dexterity, new_Intelligence);
			//---act
			double actual_str = player.getBase_Strength();
			double actual_dex = player.getBase_Dexterity();
			double actual_int = player.getBase_Intelligence();
			//---assert
			assertEquals(expected_str,actual_str);
			assertEquals(expected_dex,actual_dex);
			assertEquals(expected_int,actual_int);
		}
		
		//---for Ranger
		@Test
		public void lvlUpRanger_LvlUpAtt_rangerLvlTwoAtt() {
			//---arrange
			Hero player = new Hero("Michel", "Ranger", 1, 7, 1);
			double expected_str = 2;
			double expected_dex = 12;
			double expected_int = 2;
			float new_strength = player.getBase_Strength() + 1;
			float new_Dexterity = player.getBase_Dexterity() + 5;
			float new_Intelligence = player.getBase_Intelligence() + 1;
			player.setBaseAtt(new_strength, new_Dexterity, new_Intelligence);
			//---act
			double actual_str = player.getBase_Strength();
			double actual_dex = player.getBase_Dexterity();
			double actual_int = player.getBase_Intelligence();
			//---assert
			assertEquals(expected_str,actual_str);
			assertEquals(expected_dex,actual_dex);
			assertEquals(expected_int,actual_int);
		}
		
		//---for Mage
		@Test
		public void lvlUpMage_LvlUpAtt_mageLvlTwoAtt(){
			//---arrange
			Hero player = new Hero("Michel", "Mage", 1, 1, 8);
			double expected_str = 2;
			double expected_dex = 2;
			double expected_int = 13;
			float new_strength = player.getBase_Strength() + 1;
			float new_Dexterity = player.getBase_Dexterity() + 1;
			float new_Intelligence = player.getBase_Intelligence() + 5;
			player.setBaseAtt(new_strength, new_Dexterity, new_Intelligence);
			//---act
			double actual_str = player.getBase_Strength();
			double actual_dex = player.getBase_Dexterity();
			double actual_int = player.getBase_Intelligence();
			//---assert
			assertEquals(expected_str,actual_str);
			assertEquals(expected_dex,actual_dex);
			assertEquals(expected_int,actual_int);
		}
}